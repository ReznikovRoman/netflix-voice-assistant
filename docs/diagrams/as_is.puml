@startuml
!theme mars
skinparam componentStyle uml2
skinparam defaultFontName Segoe UI
skinparam backgroundColor motivation

title Netflix [AS IS]

agent "Client" as base_client
cloud "Sendgrid" as sendgrid
cloud "Pusher" as pusher
cloud "Twilio" as twilio

frame NetflixAdmin {
    cloud "Nginx" as nginx_admin
    component "Admin" as admin_admin
    database "Postgres" as postgres_admin

    nginx_admin <-down-> admin_admin
    admin_admin <-down-> postgres_admin
}

frame NetflixETL {
    database "Elasticsearch" as elasticsearch_etl
    component "ETL Pipeline" as etl_pipeline

    etl_pipeline <-down- postgres_admin
    etl_pipeline -down-> elasticsearch_etl
}

frame NetflixMoviesAPI {
    cloud "Traefik" as traefik_movies
    component "API" as api_movies
    database "Redis" as redis_movies

    api_movies <-up-> traefik_movies
    api_movies <-down- elasticsearch_etl
    api_movies <-down-> redis_movies: "Cache"
}

frame NetflixAuthAPI {
    cloud "Traefik" as traefik_auth
    cloud "auth0" as auth0_auth
    component "API" as api_auth
    database "Postgres" as postgres_auth
    database "Redis" as redis_auth

    api_auth <-up-> traefik_auth
    api_auth <-up-> auth0_auth: "Private API"
    api_auth <-down-> postgres_auth
    api_auth <-down-> redis_auth

    note right of redis_auth
    Used JWTs
    end note
}

frame NetflixUGC {
    cloud "Traefik" as traefik_ugc
    component "API" as api_ugc
    component "ClickHouse \nKafka integration" as consumer_clickhouse
    component "Redis Consumer" as consumer_ugc_redis
    component "Producer" as producer_ugc
    queue "Kafka" as kafka_ugc
    database "Redis Stack" as redis_stack_ugc
    database "MongoDB" as mongo_ugc
    database "ClickHouse" as clickhouse_ugc

    api_ugc <-up-> traefik_ugc
    api_ugc <-down- redis_stack_ugc
    api_ugc <-down-> mongo_ugc
    api_ugc -down-> producer_ugc
    producer_ugc -down-> kafka_ugc: "Producing messages about user actions. \nFor example, adding a movie to bookmarks"
    kafka_ugc -down-> consumer_ugc_redis
    consumer_ugc_redis -down-> redis_stack_ugc
    kafka_ugc -down-> consumer_clickhouse: "Processing user actions/data"
    consumer_clickhouse -down-> clickhouse_ugc: "ETL"

    note bottom of mongo_ugc
    User reviews
    end note
    note bottom of redis_stack_ugc
    User content
    end note
    note right of clickhouse_ugc
    Analytics data
    end note
}

frame NetflixNotifications {
    cloud "Traefik" as traefik_notifications
    component "API" as api_notifications
    queue "Message Queue" as queue_notifications
    component "Scheduler" as scheduler_notifications
    database "Redis Stack" as redis_stack_notifications

    frame WorkerGroupNotifications {
        component "Worker 1" as worker_1_notifications
        component "Worker 2" as worker_2_notifications
        component "Worker N" as worker_n_notifications
    }

    api_notifications <-up-> traefik_notifications
    api_notifications <-down-> redis_stack_notifications
    api_notifications -down-> queue_notifications: "Sending a notification"
    api_notifications -down-> scheduler_notifications: "Configuration of scheduled notifications"
    queue_notifications <-down- WorkerGroupNotifications: "Processing messages from queue"
    scheduler_notifications -down-> queue_notifications
    WorkerGroupNotifications <-down-> redis_stack_notifications

    note right of queue_notifications
    Celery message queue
    end note
    note bottom of redis_stack_notifications
    Notifications data
    end note
}

NetflixNotifications -up-> sendgrid: "Email"
NetflixNotifications -up-> pusher: "Push-notifications"
NetflixNotifications -up-> twilio: "SMS"

base_client <-down-> nginx_admin: "Films, actors and genres management"
base_client <-down-> traefik_movies: "Core movies API"
base_client <-down-> traefik_auth: "Users and roles management"
base_client <-down-> traefik_ugc: "User generated content"
base_client <-down-> traefik_notifications: "Notifications management"
@enduml
